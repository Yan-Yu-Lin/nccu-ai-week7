[
  {
    "chunk_id": "call_ureTn8JIkup6oK496PxEub0a",
    "text": "Text generation\n===============\n\nLearn how to prompt a model to generate text.\n\nWith the OpenAI API, you can use a [large language model](/docs/models) to generate text from a prompt, as you might using [ChatGPT](https://chatgpt.com). Models can generate almost any kind of text response—like code, mathematical equations, structured JSON data, or human-like prose.\n\nHere's a simple example using the [Responses API](/docs/api-reference/responses), our recommended API for all new projects.\n\nGenerate text from a simple prompt\n\n\n```python\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.create(\n    model=\"gpt-5\",\n    input=\"Write a one-sentence bedtime story about a unicorn.\"\n)\n\nprint(response.output_text)\n```\n\n```csharp\nusing OpenAI.Responses;\n\nstring key = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")!;\nOpenAIResponseClient client = new(model: \"gpt-5\", apiKey: key);\n\nOpenAIResponse response = client.CreateResponse(\n    \"Write a one-sentence bedtime story about a unicorn.\"\n);\n\nConsole.WriteLine(response.GetOutputText());\n```",
    "source_file": "text generation.md",
    "chunk_index": 0,
    "char_count": 1066
  },
  {
    "chunk_id": "call_6ehfaEgKs94qGy3SL7dSFvIo",
    "text": "An array of content generated by the model is in the `output` property of the response. In this simple example, we have just one output which looks like this:\n\n```json\n[\n    {\n        \"id\": \"msg_67b73f697ba4819183a15cc17d011509\",\n        \"type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"output_text\",\n                \"text\": \"Under the soft glow of the moon, Luna the unicorn danced through fields of twinkling stardust, leaving trails of dreams for every child asleep.\",\n                \"annotations\": []\n            }\n        ]\n    }\n]\n```\n\n**The `output` array often has more than one item in it!** It can contain tool calls, data about reasoning tokens generated by [reasoning models](/docs/guides/reasoning), and other items. It is not safe to assume that the model's text output is present at `output[0].content[0].text`.\n\nSome of our [official SDKs](/docs/libraries) include an `output_text` property on model responses for convenience, which aggregates all text outputs from the model into a single string. This may be useful as a shortcut to access text output from the model.\n\nIn addition to plain text, you can also have the model return structured data in JSON format—this feature is called [**Structured Outputs**](/docs/guides/structured-outputs).",
    "source_file": "text generation.md",
    "chunk_index": 1,
    "char_count": 1320
  },
  {
    "chunk_id": "call_rZT2mupPTTM9Oz3mbjfVQzym",
    "text": "Prompt engineering\n------------------\n\n**Prompt engineering** is the process of writing effective instructions for a model, such that it consistently generates content that meets your requirements.\n\nBecause the content generated from a model is non-deterministic, prompting to get your desired output is a mix of art and science. However, you can apply techniques and best practices to get good results consistently.\n\nSome prompt engineering techniques work with every model, like using message roles. But different models might need to be prompted differently to produce the best results. Even different snapshots of models within the same family could produce different results. So as you build more complex applications, we strongly recommend:\n\n*   Pinning your production applications to specific [model snapshots](/docs/models) (like `gpt-5-2025-08-07` for example) to ensure consistent behavior\n*   Building [evals](/docs/guides/evals) that measure the behavior of your prompts so you can monitor prompt performance as you iterate, or when you change and upgrade model versions\n\nNow, let's examine some tools and techniques available to you to construct prompts.",
    "source_file": "text generation.md",
    "chunk_index": 2,
    "char_count": 1168
  },
  {
    "chunk_id": "call_0nOGS8ylC6IH6ApTMZJKYEQs",
    "text": "Choosing models and APIs\n------------------------\n\nOpenAI has many different [models](/docs/models) and several APIs to choose from. [Reasoning models](/docs/guides/reasoning), like o3 and GPT-5, behave differently from chat models and respond better to different prompts. One important note is that reasoning models perform better and demonstrate higher intelligence when used with the Responses API.\n\nIf you're building any text generation app, we recommend using the Responses API over the older Chat Completions API. And if you're using a reasoning model, it's especially useful to [migrate to Responses](/docs/guides/migrate-to-responses).",
    "source_file": "text generation.md",
    "chunk_index": 3,
    "char_count": 644
  },
  {
    "chunk_id": "call_xNWotBEVaXrc2UUbHzSCehDq",
    "text": "Message roles and instruction following\n---------------------------------------\n\nYou can provide instructions to the model with [differing levels of authority](https://model-spec.openai.com/2025-02-12.html#chain_of_command) using the `instructions` API parameter along with **message roles**.\n\nThe `instructions` parameter gives the model high-level instructions on how it should behave while generating a response, including tone, goals, and examples of correct responses. Any instructions provided this way will take priority over a prompt in the `input` parameter.\n\nGenerate text with instructions\n\n\n```python\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.create(\n    model=\"gpt-5\",\n    reasoning={\"effort\": \"low\"},\n    instructions=\"Talk like a pirate.\",\n    input=\"Are semicolons optional in JavaScript?\",\n)\n\nprint(response.output_text)\n```",
    "source_file": "text generation.md",
    "chunk_index": 4,
    "char_count": 872
  },
  {
    "chunk_id": "call_nitVCGrjfpmnOtu3IHpX34aX",
    "text": "The example above is roughly equivalent to using the following input messages in the `input` array:\n\nGenerate text with messages using different roles\n\n\n```python\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.create(\n    model=\"gpt-5\",\n    reasoning={\"effort\": \"low\"},\n    input=[\n        {\n            \"role\": \"developer\",\n            \"content\": \"Talk like a pirate.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Are semicolons optional in JavaScript?\"\n        }\n    ]\n)\n\nprint(response.output_text)\n```",
    "source_file": "text generation.md",
    "chunk_index": 5,
    "char_count": 559
  },
  {
    "chunk_id": "call_CAgfxyHYra8XLwCRRo98zpjz",
    "text": "Note that the `instructions` parameter only applies to the current response generation request. If you are [managing conversation state](/docs/guides/conversation-state) with the `previous_response_id` parameter, the `instructions` used on previous turns will not be present in the context.\n\nThe [OpenAI model spec](https://model-spec.openai.com/2025-02-12.html#chain_of_command) describes how our models give different levels of priority to messages with different roles.\n\n|developer|user|assistant|\n|---|---|---|\n|developer messages are instructions provided by the application developer, prioritized ahead of user messages.|user messages are instructions provided by an end user, prioritized behind developer messages.|Messages generated by the model have the assistant role.|\n\nA multi-turn conversation may consist of several messages of these types, along with other content types provided by both you and the model. Learn more about [managing conversation state here](/docs/guides/conversation-state).\n\nYou could think about `developer` and `user` messages like a function and its arguments in a programming language.\n\n*   `developer` messages provide the system's rules and business logic, like a function definition.\n*   `user` messages provide inputs and configuration to which the `developer` message instructions are applied, like arguments to a function.",
    "source_file": "text generation.md",
    "chunk_index": 6,
    "char_count": 1366
  },
  {
    "chunk_id": "call_OfIwzhumhUuyaqibq5ZO2GLa",
    "text": "Reusable prompts\n----------------\n\nIn the OpenAI dashboard, you can develop reusable [prompts](/chat/edit) that you can use in API requests, rather than specifying the content of prompts in code. This way, you can more easily build and evaluate your prompts, and deploy improved versions of your prompts without changing your integration code.\n\nHere's how it works:\n\n1.  **Create a reusable prompt** in the [dashboard](/chat/edit) with placeholders like `{{customer_name}}`.\n2.  **Use the prompt** in your API request with the `prompt` parameter. The prompt parameter object has three properties you can configure:\n    *   `id` — Unique identifier of your prompt, found in the dashboard\n    *   `version` — A specific version of your prompt (defaults to the \"current\" version as specified in the dashboard)\n    *   `variables` — A map of values to substitute in for variables in your prompt. The substitution values can either be strings, or other Response input message types like `input_image` or `input_file`. [See the full API reference](/docs/api-reference/responses/create).",
    "source_file": "text generation.md",
    "chunk_index": 7,
    "char_count": 1080
  },
  {
    "chunk_id": "call_cU8QLUvCVCnnSBpH9kRmqeoV",
    "text": "String variables\n\nGenerate text with a prompt template\n\n\n```python\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.create(\n    model=\"gpt-5\",\n    prompt={\n        \"id\": \"pmpt_abc123\",\n        \"version\": \"2\",\n        \"variables\": {\n            \"customer_name\": \"Jane Doe\",\n            \"product\": \"40oz juice box\"\n        }\n    }\n)\n\nprint(response.output_text)\n```",
    "source_file": "text generation.md",
    "chunk_index": 8,
    "char_count": 387
  },
  {
    "chunk_id": "call_mq4Ar6NcGJIdZjLiPehSTKG5",
    "text": "Variables with file input\n\nPrompt template with file input variable\n\n\n```python\nimport openai, pathlib\n\nclient = openai.OpenAI()\n\n# Upload a PDF we will reference in the variables\nfile = client.files.create(\n    file=open(\"draconomicon.pdf\", \"rb\"),\n    purpose=\"user_data\",\n)\n\nresponse = client.responses.create(\n    model=\"gpt-5\",\n    prompt={\n        \"id\": \"pmpt_abc123\",\n        \"variables\": {\n            \"topic\": \"Dragons\",\n            \"reference_pdf\": {\n                \"type\": \"input_file\",\n                \"file_id\": file.id,\n            },\n        },\n    },\n)\n\nprint(response.output_text)\n```",
    "source_file": "text generation.md",
    "chunk_index": 9,
    "char_count": 601
  },
  {
    "chunk_id": "call_2RQnDvl9VxdEsPCP0v5L40RY",
    "text": "Next steps\n----------\n\nNow that you known the basics of text inputs and outputs, you might want to check out one of these resources next.\n\n[\n\nBuild a prompt in the Playground\n\nUse the Playground to develop and iterate on prompts.\n\n](/chat/edit)[\n\nGenerate JSON data with Structured Outputs\n\nEnsure JSON data emitted from a model conforms to a JSON schema.\n\n](/docs/guides/structured-outputs)[\n\nFull API reference\n\nCheck out all the options for text generation in the API reference.\n\n](/docs/api-reference/responses)\n\nWas this page useful?",
    "source_file": "text generation.md",
    "chunk_index": 10,
    "char_count": 538
  }
]